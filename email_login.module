<?php

/**
 * Capture the form stubmit and check the form_id if it matches a login form, then
 * it will check it as an email using an extra validation step
 * @param array $form The current form  (I guess...)
 * @param array $form_state The state of the current form  (I guess...)
 * @param string $form_id The unique identifier for this form
 * @see hook_form_alter
 */
function email_login_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    //there are two normal login forms
    case 'user_login':
    case 'user_login_block':
      _email_login_user_login_form_alter($form, $form_state, $form_id);
      
      break;
    case 'user_register':
      _email_login_user_register_form_alter($form, $form_state, $form_id);
      break;
    //ignore other stuff
    default:
      return;
      break;
  }
}

function _email_login_user_login_form_alter(&$form, $form_state, $form_id){
  // Ensure a valid validate array.
  $form['#validate'] = is_array($form['#validate']) ? $form['#validate'] : array();
  // your validation function must run first.
  array_unshift($form['#validate'], 'email_login_user_login_validate');
}

/**
 * Capture the username entered, if there is an @ symbol, it will check it against email addresses instead of the username
 * if multiple_email is installed, check against that table instead
 * @param array $form The current form  (I guess...)
 * @param array $form_state The state of the form (I guess...)
 */
function email_login_user_login_validate($form, &$form_state) {
  if (isset($form_state['values']['name']) && strpos($form_state['values']['name'], '@') !== false) {
    if (module_exists('multiple_email')) {
      $name = db_result(db_query("SELECT users.name FROM {users} JOIN multiple_email ON multiple_email.uid = users.uid WHERE (LOWER(multiple_email.email) = LOWER('%s') AND multiple_email.confirmed = TRUE) OR LOWER(users.mail) = LOWER('%s')", $form_state['values']['name'], $form_state['values']['name']));
    } else {
      $name = db_result(db_query("SELECT name FROM {users} WHERE LOWER(mail) = LOWER('%s')", $form_state['values']['name']));
    }
    if ($name) {
      form_set_value($form['name'], $name, $form_state);
    }
  }
}

function _email_login_user_register_form_alter(&$form, $form_state, $form_id) {
  unset($form['name']);
  array_unshift($form['#validate'], 'email_login_user_register_validate');
}

/**
 * Take the email address and get a username
 * if a username already exists append _[0-9]+ to it
 */
function email_login_user_register_validate(&$form, &$form_state) {
  $email = $form_state['values']['mail'];
  if($email){
    $t = explode('@',$email);
    $name = reset($t);
    $search = $name .'%';
    unset($t);
    $count = db_result(db_query("SELECT COUNT(name) FROM {users} WHERE LOWER(name) LIKE LOWER('%s')", $search));
    //$form_state
    if($count > 0){
      $name = $name. '_' . $count;
    }
    $form_state['values']['name'] = $name;
  }
}